Parameters:
  SecurityGroupDescription:
    Description: Security Group for SSH
    Type: String
  SecurityGroupPort:
    Description: lock to my personal IP
    Type: Number
    MinValue: 20 # out range 19
    MaxValue: 65535
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t2.micro
    AllowedValues: #possible values
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  DBPwd:
    NoEcho: true
    Description: The database admin account password (won't be echoed)
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SecurityGroupIngressCIDR:
    Description: locked to my Personal IP
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # DbSubnetIpBlocks:
  #   Description: "Comma-delimited list of three CIDR blocks"
  #   Type: CommaDelimitedList
  #   Default: "10.0.48.0/24, 10.0.112.0/24, 10.0.176.0/24"

Resources:
  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      #we reference the InstanceType parameter
      InstanceType: !Ref InstanceType # link to the instance type param
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", ImageID]
      # here we reference an internal CloudFormation resource
      SubnetId: !ImportValue SampleNetworkCrossStack-SubnetID
      # Link EC2 instance to security group (two resources)
      SecurityGroupIds:
        - !Ref SSHSecurityGroup # Referencing another resources!!!
        - !ImportValue SampleNetworkCrossStack-SecurityGroupID
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "This was Server launched by Clovis Neba running using CLouFormation" > /var/www/html/index.html
      # SecurityGroups :
      #   - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: myInstance

  # HOMEWORK
  # CREATE AN ELATIC IP RESOURCE
  # ATTACH IP TO THE EC2 INSTANCE

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
        - CidrIp: !Ref SecurityGroupIngressCIDR
          FromPort: !Ref SecurityGroupPort
          ToPort: !Ref SecurityGroupPort
          IpProtocol: tcp
      VpcId: !ImportValue SampleNetworkCrossStack-VPCID
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LinuxEC2Instance
Mappings:
  RegionMap: 
    us-east-1: 
      "ImageID": "ami-0ff8a91507f77f867"
    us-west-2: 
      "ImageID": "ami-0341aeea105412b57"
    us-west-1: 
      "ImageID": "ami-0bdb828fd58c52235"
    eu-west-1: 
      "ImageID": "ami-047bb4163c506cd98"
    ap-southeast-1: 
      "ImageID": "ami-08569b978cc4dfa10"
    ap-northeast-1: 
      "ImageID": "ami-06cd52961ce9f0d85"


Outputs:
  PrivateIp:
    Description: The private Ip for our web server
    Value: !GetAtt LinuxEC2Instance.PrivateIp 
    Export: 
      Name: PrivateIp 
  PrivateDnsName:
    Description: The private DNS name of my LinuxEC2Instance
    Value: !GetAtt LinuxEC2Instance.PrivateDnsName
    Export: 
      Name: !Sub "${AWS::StackName}-PrivateDnsName"